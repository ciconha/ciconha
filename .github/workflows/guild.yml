name: üõ°Ô∏è Card Guild

on:
  schedule:
    - cron: '0 12 * * *' # Atualiza diariamente √†s 12h UTC (~9h no Brasil)
  workflow_dispatch:
    inputs:
      usuario:
        description: 'Usu√°rio do GitHub (ex: ciconha)'
        required: true
        default: 'ciconha'

permissions:
  contents: write

jobs:
  gerar-svg:
    runs-on: ubuntu-latest

    steps:
      - name: üß© Checkout do reposit√≥rio
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Instalar depend√™ncias
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl jq imagemagick moreutils

      - name: üîç Buscar dados do GitHub
        id: fetch-data
        run: |
          USER="${{ github.event.inputs.usuario }}"
          TOKEN="${{ secrets.TSUKUYOMI_CICONHA }}"

          echo "üì° Coletando dados do usu√°rio: $USER"

          # Buscar informa√ß√µes principais do usu√°rio
          curl -s -H "Authorization: token $TOKEN" "https://api.github.com/users/$USER" > user.json

          # Buscar reposit√≥rios (ordenados por estrelas)
          curl -s -H "Authorization: token $TOKEN" "https://api.github.com/users/$USER/repos?sort=stars&per_page=100" > repos.json

          # Buscar eventos (commits, PRs, issues)
          curl -s -H "Authorization: token $TOKEN" "https://api.github.com/users/$USER/events?per_page=100" > events.json

          sanitize() {
            echo "$1" | iconv -c -t UTF-8//TRANSLIT | tr -d '\n' | sed 's/"/\\"/g'
          }

          LOGIN=$(sanitize "$(jq -r '.login' user.json)")
          AVATAR=$(sanitize "$(jq -r '.avatar_url' user.json)")
          NAME=$(sanitize "$(jq -r '.name // "Usu√°rio Desconhecido"' user.json)")
          COMPANY=$(sanitize "$(jq -r '.company // "Independente"' user.json)")
          BIO=$(sanitize "$(jq -r '.bio // "Desenvolvedor apaixonado por tecnologia."' user.json)")
          REPOS=$(jq -r '.public_repos' user.json)
          FOLLOWERS=$(jq -r '.followers' user.json)

          COMMITS=$(jq '[.[] | select(.type == "PushEvent")] | length' events.json)
          PRS=$(jq '[.[] | select(.type == "PullRequestEvent")] | length' events.json)
          ISSUES=$(jq '[.[] | select(.type == "IssuesEvent")] | length' events.json)

          TOTAL_XP=$((REPOS * 50 + FOLLOWERS * 30 + COMMITS * 2 + PRS * 10 + ISSUES * 5))
          LEVEL=$((TOTAL_XP / 1000 + 1))
          XP_PERCENTAGE=$(( (TOTAL_XP % 1000) * 100 / 1000 ))

          if [ "$REPOS" -gt 50 ]; then
            CLASS="Arquiteto"
          elif [ "$FOLLOWERS" -gt 100 ]; then
            CLASS="Lenda"
          elif [ "$REPOS" -gt 30 ] && [ "$FOLLOWERS" -gt 50 ]; then
            CLASS="Mestre"
          else
            CLASS="Aventureiro"
          fi

          if [ "$REPOS" -gt 100 ]; then
            RANK="Lend√°rio"
          elif [ "$REPOS" -gt 50 ]; then
            RANK="√âpico"
          else
            RANK="Her√≥i"
          fi

          jq 'sort_by(-.stargazers_count) | .[0:2] | .[] | {name: .name, description: (.description // "Sem descri√ß√£o"), stars: .stargazers_count}' repos.json > top_projects.json

          echo "login=$LOGIN" >> $GITHUB_OUTPUT
          echo "avatar=$AVATAR" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "company=$COMPANY" >> $GITHUB_OUTPUT
          echo "bio=$BIO" >> $GITHUB_OUTPUT
          echo "repos=$REPOS" >> $GITHUB_OUTPUT
          echo "followers=$FOLLOWERS" >> $GITHUB_OUTPUT
          echo "commits=$COMMITS" >> $GITHUB_OUTPUT
          echo "prs=$PRS" >> $GITHUB_OUTPUT
          echo "issues=$ISSUES" >> $GITHUB_OUTPUT
          echo "total_xp=$TOTAL_XP" >> $GITHUB_OUTPUT
          echo "level=$LEVEL" >> $GITHUB_OUTPUT
          echo "xp_percentage=$XP_PERCENTAGE" >> $GITHUB_OUTPUT
          echo "class=$CLASS" >> $GITHUB_OUTPUT
          echo "rank=$RANK" >> $GITHUB_OUTPUT

      - name: üé® Gerar SVG do Cart√£o (Dark Red)
        run: |
          mkdir -p cards

          PROJECT1_NAME=$(jq -r '.name' top_projects.json | head -1)
          PROJECT1_DESC=$(jq -r '.description' top_projects.json | head -1)
          PROJECT1_STARS=$(jq -r '.stars' top_projects.json | head -1)

          PROJECT2_NAME=$(jq -r '.name' top_projects.json | tail -1)
          PROJECT2_DESC=$(jq -r '.description' top_projects.json | tail -1)
          PROJECT2_STARS=$(jq -r '.stars' top_projects.json | tail -1)

          CURRENT_DATE=$(date +'%d/%m/%Y')

          cat > cards/${{ github.event.inputs.usuario }}.svg << EOF
          <svg xmlns="http://www.w3.org/2000/svg" width="460" height="310" viewBox="0 0 460 310">
            <defs>
              <linearGradient id="bgGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" stop-color="#1a0000"/>
                <stop offset="100%" stop-color="#330000"/>
              </linearGradient>
              <style>
                .title { font-size: 22px; font-weight: bold; fill: #FF5555; }
                .subtitle { font-size: 13px; fill: #FF8888; }
                .text { font-size: 11px; fill: #FFCCCC; }
                .project-title { font-size: 11px; font-weight: bold; fill: #FFAAAA; }
                .project-desc { font-size: 10px; fill: #FFBBBB; }
              </style>
            </defs>

            <rect width="460" height="310" fill="url(#bgGradient)" rx="15" ry="15" stroke="#FF0000" stroke-width="3"/>

            <!-- Avatar -->
            <clipPath id="avatarClip"><circle cx="75" cy="75" r="30"/></clipPath>
            <image href="${{ steps.fetch-data.outputs.avatar }}" x="45" y="45" width="60" height="60" clip-path="url(#avatarClip)" />

            <!-- Nome e empresa -->
            <text x="120" y="65" class="title">${{ steps.fetch-data.outputs.name }}</text>
            <text x="120" y="85" class="subtitle">üè¢ ${{
              steps.fetch-data.outputs.company }} ‚Ä¢ ‚öî ${{
              steps.fetch-data.outputs.class }} (${{ steps.fetch-data.outputs.rank }})</text>

            <text x="120" y="105" class="text">${{ steps.fetch-data.outputs.bio }}</text>

            <!-- XP -->
            <text x="120" y="125" class="text">N√≠vel: ${{
              steps.fetch-data.outputs.level }} ‚Ä¢ XP Total: ${{
              steps.fetch-data.outputs.total_xp }}</text>
            <rect x="120" y="130" width="200" height="8" fill="#330000" rx="4" ry="4"/>
            <rect x="120" y="130" width="$((200 * ${{ steps.fetch-data.outputs.xp_percentage }} / 100))" height="8" fill="#FF0000" rx="4" ry="4"/>

            <!-- Projetos -->
            <text x="30" y="170" class="subtitle">‚≠ê Projetos em destaque:</text>
            <text x="30" y="190" class="project-title">‚Ä¢ $PROJECT1_NAME</text>
            <text x="30" y="205" class="project-desc">$PROJECT1_DESC</text>
            <text x="30" y="220" class="project-desc">‚≠ê $PROJECT1_STARS estrelas</text>

            <text x="240" y="190" class="project-title">‚Ä¢ $PROJECT2_NAME</text>
            <text x="240" y="205" class="project-desc">$PROJECT2_DESC</text>
            <text x="240" y="220" class="project-desc">‚≠ê $PROJECT2_STARS estrelas</text>

            <!-- Rodap√© -->
            <text x="230" y="295" text-anchor="middle" class="text">
              Gerado em $CURRENT_DATE ‚Ä¢ ${{
                steps.fetch-data.outputs.commits }} commits ‚Ä¢ ${{
                steps.fetch-data.outputs.prs }} PRs ‚Ä¢ ${{
                steps.fetch-data.outputs.issues }} issues
            </text>
          </svg>
          EOF

          echo "‚úÖ Cart√£o SVG Dark Red gerado para ${{ github.event.inputs.usuario }}!"

      - name: üíæ Commit e Push autom√°tico
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add cards/
          git commit -m "ü©∏ Atualiza√ß√£o autom√°tica do cart√£o da guilda para ${{ github.event.inputs.usuario }}" || echo "Nenhuma mudan√ßa detectada"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.TSUKUYOMI_CICONHA }}
