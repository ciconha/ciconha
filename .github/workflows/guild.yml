name: Guild Card SVG

on:
  workflow_dispatch:
    inputs:
      usuario:
        description: 'Nome de usuário do GitHub'
        required: true
        default: 'ciconha'

permissions:
  contents: write

jobs:
  gerar-svg:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Buscar dados do GitHub e gerar SVG
        uses: actions/github-script@v7
        with:
          script: |
            const { default: fetch } = await import('node-fetch');
            
            const username = '${{ github.event.inputs.usuario }}';
            
            // Buscar dados do usuário
            const userResponse = await fetch(`https://api.github.com/users/${username}`);
            const userData = await userResponse.json();
            
            // Buscar repositórios do usuário
            const reposResponse = await fetch(`https://api.github.com/users/${username}/repos?sort=updated&per_page=100`);
            const reposData = await reposResponse.json();
            
            // Buscar contribuições (PRs, issues, commits - aproximação)
            const eventsResponse = await fetch(`https://api.github.com/users/${username}/events/public?per_page=100`);
            const eventsData = await eventsResponse.json();
            
            // Processar dados
            const commits = eventsData.filter(e => e.type === 'PushEvent').length;
            const prs = eventsData.filter(e => e.type === 'PullRequestEvent').length;
            const issues = eventsData.filter(e => e.type === 'IssuesEvent').length;
            
            // Calcular XP baseado em múltiplos fatores
            const totalXP = userData.public_repos * 50 + userData.followers * 30 + commits * 2 + prs * 10 + issues * 5;
            const level = Math.floor(totalXP / 1000) + 1;
            const xpForNextLevel = 1000 - (totalXP % 1000);
            const xpPercentage = ((1000 - xpForNextLevel) / 1000 * 100).toFixed(1);
            
            // Encontrar melhores projetos (com mais stars)
            const topProjects = reposData
              .sort((a, b) => b.stargazers_count - a.stargazers_count)
              .slice(0, 2)
              .map(repo => ({
                name: repo.name,
                description: repo.description || 'Sem descrição',
                stars: repo.stargazers_count
              }));
            
            // Determinar classe baseado no perfil
            let userClass = 'Aventureiro';
            if (userData.public_repos > 50) userClass = 'Arquiteto';
            if (userData.followers > 100) userClass = 'Lenda';
            if (userData.public_repos > 30 && userData.followers > 50) userClass = 'Mestre';
            
            // Gerar SVG
            const svgContent = `
            <svg xmlns="http://www.w3.org/2000/svg" width="450" height="280" viewBox="0 0 450 280">
              <defs>
                <style>
                  @import url('https://fonts.googleapis.com/css2?family=MedievalSharp&display=swap');
                  .card { font-family: 'MedievalSharp', cursive; }
                  .title { font-size: 22px; font-weight: bold; fill: #8B4513; }
                  .subtitle { font-size: 14px; fill: #654321; }
                  .text { font-size: 12px; fill: #5D4037; }
                  .xp-text { font-size: 10px; fill: #795548; }
                  .project-title { font-size: 11px; font-weight: bold; fill: #5D4037; }
                  .project-desc { font-size: 10px; fill: #795548; }
                  .stat { font-size: 11px; fill: #5D4037; }
                </style>
                <linearGradient id="bgGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                  <stop offset="0%" stop-color="#F5F5DC" />
                  <stop offset="100%" stop-color="#DEB887" />
                </linearGradient>
                <linearGradient id="xpGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                  <stop offset="0%" stop-color="#FFD700" />
                  <stop offset="100%" stop-color="#FFA500" />
                </linearGradient>
              </defs>
              
              <!-- Fundo do cartão -->
              <rect width="450" height="280" fill="url(#bgGradient)" rx="15" ry="15" stroke="#8B4513" stroke-width="3"/>
              
              <!-- Avatar -->
              <defs>
                <clipPath id="avatarClip">
                  <circle cx="75" cy="75" r="30"/>
                </clipPath>
              </defs>
              <image href="${userData.avatar_url}" x="45" y="45" width="60" height="60" clip-path="url(#avatarClip)"/>
              
              <!-- Informações principais -->
              <text x="150" y="60" class="title">${userData.login || username}</text>
              <text x="150" y="80" class="subtitle">Nv. ${level} - ${userData.public_repos} ano (${userData.followers}) no GH-${userData.id.toString().slice(-2)}</text>
              
              <!-- Barra de XP -->
              <text x="150" y="100" class="xp-text">${totalXP} XP • ${xpPercentage}% para o próximo nível</text>
              <rect x="150" y="105" width="200" height="8" fill="#E0E0E0" rx="4" ry="4"/>
              <rect x="150" y="105" width="${200 * (xpPercentage / 100)}" height="8" fill="url(#xpGradient)" rx="4" ry="4"/>
              
              <!-- Status -->
              <text x="150" y="125" class="stat">• Classe: ${userClass}</text>
              <text x="150" y="140" class="stat">• Rank: ${userData.public_repos > 100 ? 'Lendário' : userData.public_repos > 50 ? 'Épico' : 'Herói'}</text>
              <text x="150" y="155" class="stat">• Capacidade: ${userData.followers > 1000 ? 'Líder' : 'Companheiro'}</text>
              
              <!-- Atividades -->
              <text x="150" y="175" class="subtitle">Atividades: ${commits} commits + ${prs} PRs + ${issues} issues</text>
              
              <!-- Projetos Destacados -->
              <text x="30" y="200" class="title">Projetos Destacados:</text>
              ${topProjects.map((project, index) => `
                <g transform="translate(30, ${210 + index * 40})">
                  <text y="0" class="project-title">• ${project.name}</text>
                  <text y="15" class="project-desc">${project.description}</text>
                  <text y="30" class="project-desc">⭐ ${project.stars} estrelas</text>
                </g>
              `).join('')}
              
              <!-- Rodapé -->
              <text x="225" y="270" text-anchor="middle" class="text">Cartão da Guilda RPG • Gerado em ${new Date().toLocaleDateString('pt-BR')}</text>
            </svg>
            `;
            
            // Salvar arquivo SVG
            const fs = require('fs');
            if (!fs.existsSync('cards')) {
              fs.mkdirSync('cards');
            }
            fs.writeFileSync(`cards/${username}.svg`, svgContent.trim());
            
            console.log('Cartão SVG gerado com sucesso!');
            
      - name: Commit e Push
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add cards/
          git commit -m "Cartão SVG da guilda gerado para ${{ github.event.inputs.usuario }}"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
