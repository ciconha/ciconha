name: Guild Card SVG

on:
  workflow_dispatch:
    inputs:
      usuario:
        description: 'Usu√°rio do GitHub (ex: Tsukuyomimilier)'
        required: true
        default: 'Tsukuyomimilier'

permissions:
  contents: write

jobs:
  gerar-svg:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do reposit√≥rio
        uses: actions/checkout@v4

      - name: Instalar depend√™ncias
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl jq imagemagick

      - name: Buscar dados do GitHub
        id: fetch-data
        run: |
          echo "üîç Coletando dados de ${{ github.event.inputs.usuario }}..."

          # Buscar dados do usu√°rio
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/users/${{ github.event.inputs.usuario }}" > user.json
          
          # Buscar reposit√≥rios
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/users/${{ github.event.inputs.usuario }}/repos?sort=stars&per_page=100" > repos.json
          
          # Buscar eventos para commits, PRs e issues
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/users/${{ github.event.inputs.usuario }}/events?per_page=100" > events.json
          
          # Extrair dados
          LOGIN=$(jq -r '.login' user.json)
          AVATAR=$(jq -r '.avatar_url' user.json)
          NAME=$(jq -r '.name // "Usu√°rio Desconhecido"' user.json)
          COMPANY=$(jq -r '.company // "Independente"' user.json)
          BIO=$(jq -r '.bio // "Desenvolvedor apaixonado por tecnologia."' user.json)
          REPOS=$(jq -r '.public_repos' user.json)
          FOLLOWERS=$(jq -r '.followers' user.json)
          USER_ID=$(jq -r '.id' user.json)
          
          COMMITS=$(jq '[.[] | select(.type == "PushEvent")] | length' events.json)
          PRS=$(jq '[.[] | select(.type == "PullRequestEvent")] | length' events.json)
          ISSUES=$(jq '[.[] | select(.type == "IssuesEvent")] | length' events.json)
          
          TOTAL_XP=$((REPOS * 50 + FOLLOWERS * 30 + COMMITS * 2 + PRS * 10 + ISSUES * 5))
          LEVEL=$((TOTAL_XP / 1000 + 1))
          XP_PERCENTAGE=$(( (TOTAL_XP % 1000) * 100 / 1000 ))
          
          # Classe e Rank
          if [ $REPOS -gt 50 ]; then
            CLASS="Arquiteto"
          elif [ $FOLLOWERS -gt 100 ]; then
            CLASS="Lenda"
          elif [ $REPOS -gt 30 ] && [ $FOLLOWERS -gt 50 ]; then
            CLASS="Mestre"
          else
            CLASS="Aventureiro"
          fi
          
          if [ $REPOS -gt 100 ]; then
            RANK="Lend√°rio"
          elif [ $REPOS -gt 50 ]; then
            RANK="√âpico"
          else
            RANK="Her√≥i"
          fi
          
          # Top 2 projetos
          jq 'sort_by(-.stargazers_count) | .[0:2] | .[] | {name: .name, description: (.description // "Sem descri√ß√£o"), stars: .stargazers_count}' repos.json > top_projects.json
          
          echo "login=$LOGIN" >> $GITHUB_OUTPUT
          echo "avatar=$AVATAR" >> $GITHUB_OUTPUT
          echo "repos=$REPOS" >> $GITHUB_OUTPUT
          echo "followers=$FOLLOWERS" >> $GITHUB_OUTPUT
          echo "user_id=$USER_ID" >> $GITHUB_OUTPUT
          echo "commits=$COMMITS" >> $GITHUB_OUTPUT
          echo "prs=$PRS" >> $GITHUB_OUTPUT
          echo "issues=$ISSUES" >> $GITHUB_OUTPUT
          echo "total_xp=$TOTAL_XP" >> $GITHUB_OUTPUT
          echo "level=$LEVEL" >> $GITHUB_OUTPUT
          echo "xp_percentage=$XP_PERCENTAGE" >> $GITHUB_OUTPUT
          echo "class=$CLASS" >> $GITHUB_OUTPUT
          echo "rank=$RANK" >> $GITHUB_OUTPUT
          echo "company=$COMPANY" >> $GITHUB_OUTPUT
          echo "bio=$BIO" >> $GITHUB_OUTPUT

      - name: Gerar SVG do cart√£o
        run: |
          mkdir -p cards
          
          PROJECT1_NAME=$(jq -r '.name' top_projects.json | head -1)
          PROJECT1_DESC=$(jq -r '.description' top_projects.json | head -1)
          PROJECT1_STARS=$(jq -r '.stars' top_projects.json | head -1)
          
          PROJECT2_NAME=$(jq -r '.name' top_projects.json | tail -1)
          PROJECT2_DESC=$(jq -r '.description' top_projects.json | tail -1)
          PROJECT2_STARS=$(jq -r '.stars' top_projects.json | tail -1)
          
          CURRENT_DATE=$(date +'%d/%m/%Y')

          cat > cards/${{ github.event.inputs.usuario }}.svg << EOF
          <svg xmlns="http://www.w3.org/2000/svg" width="450" height="300" viewBox="0 0 450 300">
            <defs>
              <style>
                .card { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; }
                .title { font-size: 22px; font-weight: bold; fill: #3E2723; }
                .subtitle { font-size: 13px; fill: #4E342E; }
                .text { font-size: 12px; fill: #5D4037; }
                .project-title { font-size: 11px; font-weight: bold; fill: #4E342E; }
                .project-desc { font-size: 10px; fill: #6D4C41; }
              </style>
              <linearGradient id="bgGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" stop-color="#FFF8E1" />
                <stop offset="100%" stop-color="#FFE0B2" />
              </linearGradient>
              <linearGradient id="xpGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                <stop offset="0%" stop-color="#FFD700" />
                <stop offset="100%" stop-color="#FFA500" />
              </linearGradient>
            </defs>

            <rect width="450" height="300" fill="url(#bgGradient)" rx="15" ry="15" stroke="#795548" stroke-width="3"/>

            <!-- Avatar -->
            <clipPath id="avatarClip"><circle cx="75" cy="75" r="30"/></clipPath>
            <image href="${{ steps.fetch-data.outputs.avatar }}" x="45" y="45" width="60" height="60" clip-path="url(#avatarClip)"/>

            <!-- Bras√£o -->
            <circle cx="390" cy="60" r="25" fill="#FFD700" stroke="#8B4513" stroke-width="2"/>
            <text x="390" y="65" text-anchor="middle" font-size="20" fill="#4E342E">‚öî</text>

            <!-- Nome e dados -->
            <text x="150" y="60" class="title">${{ steps.fetch-data.outputs.login }}</text>
            <text x="150" y="80" class="subtitle">${{ steps.fetch-data.outputs.company }} ‚Ä¢ ${{ steps.fetch-data.outputs.class }} (${{
              steps.fetch-data.outputs.rank }})</text>

            <text x="150" y="100" class="text">${{ steps.fetch-data.outputs.bio }}</text>

            <!-- XP -->
            <text x="150" y="120" class="text">N√≠vel: ${{ steps.fetch-data.outputs.level }} ‚Ä¢ XP Total: ${{ steps.fetch-data.outputs.total_xp }}</text>
            <rect x="150" y="125" width="200" height="8" fill="#E0E0E0" rx="4" ry="4"/>
            <rect x="150" y="125" width="$(( 200 * ${{ steps.fetch-data.outputs.xp_percentage }} / 100 ))" height="8" fill="url(#xpGradient)" rx="4" ry="4"/>

            <!-- Projetos -->
            <text x="30" y="165" class="subtitle">‚≠ê Projetos em destaque:</text>
            <text x="30" y="185" class="project-title">‚Ä¢ $PROJECT1_NAME</text>
            <text x="30" y="200" class="project-desc">$PROJECT1_DESC</text>
            <text x="30" y="215" class="project-desc">‚≠ê $PROJECT1_STARS estrelas</text>

            <text x="230" y="185" class="project-title">‚Ä¢ $PROJECT2_NAME</text>
            <text x="230" y="200" class="project-desc">$PROJECT2_DESC</text>
            <text x="230" y="215" class="project-desc">‚≠ê $PROJECT2_STARS estrelas</text>

            <!-- Rodap√© -->
            <text x="225" y="285" text-anchor="middle" class="text">
              Gerado em $CURRENT_DATE ‚Ä¢ ${{
                steps.fetch-data.outputs.commits }} commits ‚Ä¢ ${{ steps.fetch-data.outputs.prs }} PRs ‚Ä¢ ${{ steps.fetch-data.outputs.issues }} issues
            </text>
          </svg>
          EOF

          echo "‚úÖ Cart√£o SVG gerado para ${{ github.event.inputs.usuario }} com sucesso!"

      - name: Commit e Push
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add cards/
          git commit -m "Cart√£o SVG atualizado para ${{ github.event.inputs.usuario }}"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
